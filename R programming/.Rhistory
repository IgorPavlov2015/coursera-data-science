x+y
x >2
y == 8
x*y
x/y
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
y
x*y
x/y
x %*% y
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls()
rm(list = ls())
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x -3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_sqrt
my_div
x <- 4
class(x)
x <- c(4,"a",TRUE)
class(x)
x <- c(1,3,5); y <- c(3,2,10)
rbind(x,y)
class(rbind(x,y))
x <- list(2,"a","b",TRUE)
x[[1]]
class(x[[1]])
x <- 1:4; y <- 2:3; x+y
class(x <- 1:4; y <- 2:3; x+y)
class(x+y)
x <- c(3,5,1,10,12,6)
x[x<6] <- 0
data <- read.csv("hw1_data.csv")
data
?read.csv
class(data)
?data.frame
?read.csv
data[1]
data[,1:2]
data[1,1]
data[1:6,1:2]
data[2,]
data[1:2,]
data[152:153,]
data[47,]
dataOzon <- data[,1]
dataOzon
data[47,]
data[1,]
data[,1]
dataOzon
bad <- is.na(dataOzon)
bad
dataOzon[!bad]
summary(dataOzon[!bad])
dataOzon[!bad]
dataOzon[bad]
data[data$Month==6]
data[data$Month==6,]
data[data$Month,]
data$Ozone
data[data$Ozone][data$Month==6]
data[data$Ozone][data$Month==6,]
data[data$Ozone,][data$Month==6,]
data[data$Ozone,]
data[data$Ozone,]
data$Temp[data$Month==6,]
data$Temp[data$Month==6]
data
data$Temp[data$Month==6]
Solar <- data$Solar.R[data$Ozone>31 & data$Temp>90,]
Solar <- data$Solar[data$Ozone>31 & data$Temp>90,]
Solar <- data$Solar[data$Ozone>31]
Solar <- data$Solar[data$Ozone>31&data$Temp>90,]
Solar <- data$Solar[(data$Ozone>31&data$Temp>90),]
filter(data,Ozone > 31,Temp > 90)
Solar <- data[data$Ozone>31&data$Temp>90,]
Solar
summary(Solar$Solar.R)
data$Temp[data$Month == 6]
summary(data$Temp[data$Month == 6])
summary(data$Ozone[data$Month==5])
x <- c(1,3,5); y <- c(3,2,10); rbind(x,y)
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir
args(old.dir)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir/")
file.create("mytest.R")
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.remove("mytest.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1","folder2")
?dir.create
dir.create(c("testdir2","testdir3"))
dir.create(c("testdir2")
dir.create("testdir3")
dir.create("testdir3")
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
unlink("testdir3/")
unlink("testdir3/",recursive = TRUE)
unlink("testdir2/",recursive = TRUE)
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
unlink("testdir/",recursive = TRUE)
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
":"
?":"
seq(1,20)
seq(0,10,by = 0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0,1,2),times = 10)
rep(c(0,1,2),each = 10)
num_vect <- c(0.5,55,-10,6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"Igor")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!",sep = " ")
paste(1:3,c("X","Y","Z"))
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS,1:4,sep = "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow = 4,ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data,,cnames)
colnames(my_data) <- cnames
my_data
if(x>3){}
x <-5
if(x>3){y <- 10}else{y <- 0}
for(i in 1:10) { print(i)}
x <- c("a","b","c","d")
for(i in 1:4) {print(x[i])}
for(i in seq_along(x)) {print(x[i])}
for(letter in x) {print(letter)}
for(i in 1:4) print(x[i])
x <- matrix(1:6,2,3)
for(i in seq_len(nrow(x)) {for(j in seq_len(ncol(x))) {print(x[i,j])}}
for(i in seq_len(nrow(x)) {for(j in seq_len(ncol(x))) {print(x[i,j])}}
for(i in seq_len(nrow(x))) {for(j in seq_len(ncol(x))) {print(x[i,j])}}
View(x)
count <- 5
while(count < 10) {print(count) count <- count + 1}
while(count < 10) {print(count)
count <- count + 1}
count <- 0
while(count < 10) {print(count)
count <- count + 1}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1,1,0.5)
if(coin == 1) { ##random walk
z <- z+1
} else {
z <- z-1
}
}
x0 <- 1
tol <- 1e-8
repeat()
repeat {
x1 <- 101
if(abs(x1 - x0) < tol) {
break
} else {
x0 <- x1
}
}
repeat(){
x1 <- 101
if(abs(x1 - x0) < tol) {
break
} else {
x0 <- x1
}
}
repeat(){
x1 <- 101
if(abs(x1 - x0) < tol) {
break()
} else {
x0 <- x1
}
}
x <- 1
repeat {
print(x)
x = x+1
if(x == 6){
break
}
}
repeat{
x1 <- 101
if(abs(x1 - x0) < tol) {
break
} else {
x0 <- x1
}
}
repeat{
x1 <- 101
if(abs(x1 - x0) < tol) {
break
} else {
x0 <- x1
}
}
repeat{
x1 <- 101
if(abs(x1 - x0) < tol) {
break
} else {
x0 <- x1
}
}
repeat{
x1 <- 101
if(abs(x1 - x0) < tol) {
print(x1)
break
} else {
x0 <- x1
}
}
for(i in 1:100) {
if(i <= 20) {
next()
}
print(i)
}
add2 <- function(x,y) {
x+y
}
add2(3,2)
above <- function(x,n) {
use <- x > n
x[use]
}
above(10,2)
above(1:5,2)
above <- function(x,n = 10) {
use <- x > n
x[use]
}
above(1:20)
matr <- matrix(1:10,2,5)
matr
matr[,2]
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[,i],na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality,FALSE)
install.packages(airquality)
installed.packages()
?airquality
lm <- function(x,y) {x*y}
View(lm)
lm(x,y)
x <- 1
y <- 3
lm(x,y)
View(lm)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
ls(environment(cube))
get("n",environment(cube))
ls(environment(square))
get("n",environment(square))
y <- 10
f <- function(x) {
y <- 2
y^2+g(x)
}
g <- function(x) {
x*y
}
f(3)
View(f)
View(f)
View(f)
View(f)
View(f)
square(2)
f(3)
g <- function(x) {
a <- 3
x+a+y
}
g(2)
g(2)
g <- function(x) {
a <- 3
x+a+y
}
g(2)
y <- 3
g(2)
make.NegLogLik <- function(data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100,1,2)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
get("data",environment(nLL))
optim(c(mu=0,sigma=1),nLL)$par
nLL <- make.NegLogLik(normals,c(FALSE,2))
optimize(nLL,c(-1,3))$minimum
nLL <- make.NegLogLik(normals,c(1,FALSE))
optimize(nLL,c(1e-6,10))$minimum
nLL <- make.NegLogLik(normals,c(1,FALSE))
x <- seq(1.7,1.9,len = 100)
y <- sapply(x,nLL)
plot(x,exp(-(y-min(y))),type = "1")
plot(x,exp(-(y-min(y))))
x <- seq(0.5,1.5,len = 100)
plot(x,exp(-(y-min(y))),type = "1")
plot(x,exp(-(y-min(y))))
plot(x,exp(-(y-min(y))),type = "l")
nLL <- make.NegLogLik(normals,c(FALSE,2))
plot(x,exp(-(y-min(y))),type = "l")
y <- sapply(x,nLL)
plot(x,exp(-(y-min(y))),type = "l")
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-01"))
unclass(as.Date("1970-01-01"))
unclass(as.Date("1970-01-02"))
unclass(as.Date("2016-01-14"))
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(unclass)
names(unclass(p))
p$sec
x <- Sys.time()
x
unclass(x)
x$sec
p <- as.POSIXlt(x)
p$sec
datestring <- c("January 10, 2012 10:40","December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
?strptime
datestring<- c("January 10, 2012 10:40","December 9, 2011 9:10")
datestring
x <- strptime(datestring, "%B %d, %Y %H:%M")
datestring<- c("Январь 10, 2012 10:40","Декабрь 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
Tm <- strptime(datestring, "%B %d, %Y %H:%M")
Tm <- strptime(datestring, "%B %d, %Y %H:%M")
datestring<- c("January 10, 2012 10:40","December 9, 2011 9:10")
Tm <- strptime(datestring, "%B %d, %Y %H:%M")
Tm <- strptime(datestring, "%B %d, %Y %H:%M")
Tm <- strptime(datestring, "%b %d, %Y %H:%M")
Tm <- strptime(datestring, "%B %e, %Y %H:%M")
Tm <- strptime(datestring, "%b %d, %Y %H:%M")
Tm <- strptime(datestring, "%B %d, %Y %H:%M")
Tm <- strptime(datestring, "%B %d, %Y %I:%M")
Tm <- strptime(datestring, "%B %d, %Y %H:%M")
x <- as.Date("2012-01-01")
y <- strptime("9 Jan 2011 11:34:21","%d %b %Y %H:%M:%S")
x-y
x <- as.POSIXlt(x)
x-y
class(x)
class(y)
y
x <- as.Date("2012-03-01") y <- as.Date("2012-02-28")
x <- as.Date("2012-03-01"); y <- as.Date("2012-02-28")
x-y
x <- as.POSIXct("2012-10-25 01:00:00")
y <- as.POSIXct("2012-10-25 06:00:00", tz = "GMT")
y-x
?
